import vk_api
import yaml
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from db_injections import VK
from db_injections import Methods
from pick_data_from_db import Db_data

# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config.yaml
with open('config.yaml', 'r') as config_file:
    config = yaml.safe_load(config_file)

GROUP_TOKEN = config.get('GROUP_TOKEN', '')
ACCESS_TOKEN = config.get('ACCESS_TOKEN', '')

vk_session = vk_api.VkApi(token=GROUP_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

methods = Methods()
db_picker = Db_data()
methods.add_action_type()


class Bot:
    def __init__(self):
        pass

    def sender(self, id, text, photo: None, **kwargs):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        vk.messages.send(user_id=id, message=text, attachment=photo, random_id=0, **kwargs)

    def user_name(self, user_id):  # –¥–æ—Å—Ç–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_get = vk.users.get(user_ids=user_id)
        user_get = user_get[0]['first_name']
        return user_get

    def favorites_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        buttons = ['–í–µ—Ä–Ω—É—Ç—å—Å—è', '–ó–∞–∫–æ–Ω—á–∏—Ç—å']
        buttons_colors = [VkKeyboardColor.POSITIVE, VkKeyboardColor.NEGATIVE]
        for btn, btn_color in zip(buttons, buttons_colors):
            keyboard.add_button(btn, btn_color)
        return keyboard.get_keyboard()

    def yes_no_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        buttons = ['–î–∞!', '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª']
        buttons_colors = [VkKeyboardColor.POSITIVE, VkKeyboardColor.NEGATIVE]
        for btn, btn_color in zip(buttons, buttons_colors):
            keyboard.add_button(btn, btn_color)
        return keyboard.get_keyboard()

    def standart_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        buttons = ['–î–∞–ª—å—à–µ', '–î–æ–±–∞–≤–∏—Ç—å', '–ó–∞–∫–æ–Ω—á–∏—Ç—å']
        buttons_colors = [VkKeyboardColor.SECONDARY, VkKeyboardColor.POSITIVE, VkKeyboardColor.NEGATIVE]
        for btn, btn_color in zip(buttons, buttons_colors):
            keyboard.add_button(btn, btn_color)
        keyboard.add_line()
        keyboard.add_button('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.SECONDARY)
        return keyboard.get_keyboard()

    def longpoll_event(self):  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        counter = -1
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    id = event.user_id
                    vk = VK(ACCESS_TOKEN, id)
                    msg = event.text.lower()
                    param = vk.users_params()
                    print('VK PARAMS:', param)
                    user = vk.get_info_user()
                    user_list = vk.user_info_for_db(user)
                    methods.create_user(user_list)
                    if msg == '–ø—Ä–∏–≤–µ—Ç' or msg == '–Ω–∞—á–∞—Ç—å':
                        methods.add_actions(msg, id)
                        self.sender(id, f'–ü—Ä–∏–≤–µ—Ç, {self.user_name(id)}! –ù–∞—á–Ω–µ–º?üíû –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç:)', None, keyboard=self.yes_no_keyboard())
                        counter = -1
                        for user in vk.users_list():
                            methods.create_user(user)
                            methods.add_photo(user)
                        matches = db_picker.get_matches_list(param)
                    elif msg == '–¥–∞!' or msg == '–≤–µ—Ä–Ω—É—Ç—å—Å—è':
                        methods.add_actions(msg, id)
                        counter += 1
                        if counter < len(matches):
                            user_id = matches[counter]['user_id']
                            self.sender(id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ{db_picker.print_users(matches[counter])}', db_picker.three_photos(user_id), keyboard=self.standart_keyboard())
                        else:
                            self.sender(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å:( –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?', None, keyboard=self.yes_no_keyboard())
                            counter = -1
                    elif msg == '–¥–∞–ª—å—à–µ' or msg == '–≤–µ—Ä–Ω—É—Ç—å—Å—è':
                        methods.add_actions(msg, id)
                        counter += 1
                        if counter < len(matches):
                            user_id = matches[counter]['user_id']
                            self.sender(id, f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_picker.print_users(matches[counter])}", db_picker.three_photos(user_id), keyboard=self.standart_keyboard())
                        else:
                            self.sender(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å:( –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?', None, keyboard=self.yes_no_keyboard())
                            counter = -1
                    elif msg == '–¥–æ–±–∞–≤–∏—Ç—å':
                        methods.add_actions(msg, id)
                        user_id = matches[counter]['user_id']
                        action = methods.add_to_favorites(id, user_id)
                        if action == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç":
                            self.sender(id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–Ω–µ–µ', None, keyboard=self.favorites_keyboard())
                        else:
                            self.sender(id, f'–î–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µüëå', None, keyboard=self.favorites_keyboard())
                    elif msg == '–∑–∞–∫–æ–Ω—á–∏—Ç—å' or msg == '—è –ø–µ—Ä–µ–¥—É–º–∞–ª':
                        methods.add_actions(msg, id)
                        self.sender(id, '–ü–æ–∫–∞:(', None)
                    elif msg == '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                        methods.add_actions(msg, id)
                        self.sender(id, f'–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ üìÉ:\n {db_picker.show_favorites(id)}', None, keyboard=self.favorites_keyboard())
                    else:
                        self.sender(id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é:(', None)
